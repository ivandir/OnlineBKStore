/*
 * OnlineBKStoreView.java
 * Written by Ivandir Ndrio
 * SSW561 Assignment#1
 * 11/14/2010
 */
package onlinebkstore;

import java.util.Calendar;
import java.util.Date;
import java.io.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.PreparedStatement;
import javax.swing.BoxLayout;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * The application's main frame.
 */
public class OnlineBKStoreView extends FrameView {

    public OnlineBKStoreView(SingleFrameApplication app) {
        super(app);

        initComponents();
        warningDialog = new JDialog();

        warningDialog.setTitle("Warning...");
        warningDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        warningDialog.setIconImage(null);
        warningDialog.setResizable(false);
        warningDialog.getContentPane().setLayout(new BoxLayout(warningDialog.getContentPane(), BoxLayout.LINE_AXIS));

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = OnlineBKStoreApp.getApplication().getMainFrame();
            aboutBox = new OnlineBKStoreAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        OnlineBKStoreApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTextArea = new javax.swing.JTextArea();
        clearTableButton = new javax.swing.JButton();
        purchaseButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        addToChartButton = new javax.swing.JButton();
        loginTextField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        chartTextArea = new javax.swing.JTextArea();
        greetingLabel = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        blurayCheckBox = new javax.swing.JCheckBox();
        booksCheckBox = new javax.swing.JCheckBox();
        downloadCheckBox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        completPurchaseButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        loginMenu = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        cartMenu = new javax.swing.JMenu();
        emptyCartMenu = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(onlinebkstore.OnlineBKStoreApp.class).getContext().getResourceMap(OnlineBKStoreView.class);
        mainPanel.setBackground(resourceMap.getColor("mainPanel.background")); // NOI18N
        mainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mainPanel.setMaximumSize(new java.awt.Dimension(800, 600));
        mainPanel.setMinimumSize(new java.awt.Dimension(800, 600));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        mainTextArea.setColumns(150);
        mainTextArea.setEditable(false);
        mainTextArea.setRows(5);
        mainTextArea.setTabSize(4);
        mainTextArea.setText(resourceMap.getString("mainTextArea.text")); // NOI18N
        mainTextArea.setAutoscrolls(false);
        mainTextArea.setName("mainTextArea"); // NOI18N
        jScrollPane1.setViewportView(mainTextArea);
        mainTextArea.getAccessibleContext().setAccessibleName(resourceMap.getString("mainTextArea.AccessibleContext.accessibleName")); // NOI18N

        clearTableButton.setBackground(resourceMap.getColor("clearTableButton.background")); // NOI18N
        clearTableButton.setFont(resourceMap.getFont("clearTableButton.font")); // NOI18N
        clearTableButton.setText(resourceMap.getString("clearTableButton.text")); // NOI18N
        clearTableButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clearTableButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearTableButton.setName("clearTableButton"); // NOI18N
        clearTableButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                clearTableButtonMouseReleased(evt);
            }
        });

        purchaseButton.setBackground(resourceMap.getColor("purchaseButton.background")); // NOI18N
        purchaseButton.setFont(resourceMap.getFont("purchaseButton.font")); // NOI18N
        purchaseButton.setText(resourceMap.getString("purchaseButton.text")); // NOI18N
        purchaseButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        purchaseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        purchaseButton.setName("purchaseButton"); // NOI18N
        purchaseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                purchaseButtonMouseReleased(evt);
            }
        });

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setName("jScrollPane2"); // NOI18N

        itemTable.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        itemTable.setFont(resourceMap.getFont("itemTable.font")); // NOI18N
        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ISBN", "Title", "Author/Director", "Price ($):", "Qty:"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        itemTable.setGridColor(resourceMap.getColor("itemTable.gridColor")); // NOI18N
        itemTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        itemTable.setName("itemTable"); // NOI18N
        itemTable.setRowHeight(20);
        itemTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                itemTableKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(itemTable);
        itemTable.getColumnModel().getColumn(0).setResizable(false);
        itemTable.getColumnModel().getColumn(0).setPreferredWidth(70);
        itemTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("itemTable.columnModel.title0")); // NOI18N
        itemTable.getColumnModel().getColumn(1).setResizable(false);
        itemTable.getColumnModel().getColumn(1).setPreferredWidth(350);
        itemTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("itemTable.columnModel.title1")); // NOI18N
        itemTable.getColumnModel().getColumn(2).setResizable(false);
        itemTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        itemTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("itemTable.columnModel.title2")); // NOI18N
        itemTable.getColumnModel().getColumn(3).setResizable(false);
        itemTable.getColumnModel().getColumn(3).setPreferredWidth(50);
        itemTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("itemTable.columnModel.title3")); // NOI18N
        itemTable.getColumnModel().getColumn(4).setResizable(false);
        itemTable.getColumnModel().getColumn(4).setPreferredWidth(50);
        itemTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("itemTable.columnModel.title4")); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        addToChartButton.setBackground(resourceMap.getColor("addToChartButton.background")); // NOI18N
        addToChartButton.setFont(new java.awt.Font("Monospaced", 3, 14)); // NOI18N
        addToChartButton.setText(resourceMap.getString("addToChartButton.text")); // NOI18N
        addToChartButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addToChartButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addToChartButton.setName("addToChartButton"); // NOI18N
        addToChartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addToChartButtonMouseReleased(evt);
            }
        });

        loginTextField.setText(resourceMap.getString("loginTextField.text")); // NOI18N
        loginTextField.setName("loginTextField"); // NOI18N

        loginButton.setFont(resourceMap.getFont("loginButton.font")); // NOI18N
        loginButton.setText(resourceMap.getString("loginButton.text")); // NOI18N
        loginButton.setName("loginButton"); // NOI18N
        loginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                loginButtonMouseReleased(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setName("jScrollPane3"); // NOI18N

        chartTextArea.setBackground(resourceMap.getColor("chartTextArea.background")); // NOI18N
        chartTextArea.setColumns(10);
        chartTextArea.setEditable(false);
        chartTextArea.setRows(20);
        chartTextArea.setAutoscrolls(false);
        chartTextArea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chartTextArea.setName("chartTextArea"); // NOI18N
        jScrollPane3.setViewportView(chartTextArea);

        greetingLabel.setFont(resourceMap.getFont("greetingLabel.font")); // NOI18N
        greetingLabel.setForeground(resourceMap.getColor("greetingLabel.foreground")); // NOI18N
        greetingLabel.setText(resourceMap.getString("greetingLabel.text")); // NOI18N
        greetingLabel.setName("greetingLabel"); // NOI18N

        searchTextField.setText(resourceMap.getString("searchTextField.text")); // NOI18N
        searchTextField.setName("searchTextField"); // NOI18N

        searchButton.setFont(resourceMap.getFont("searchButton.font")); // NOI18N
        searchButton.setText(resourceMap.getString("searchButton.text")); // NOI18N
        searchButton.setName("searchButton"); // NOI18N
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                searchButtonMouseReleased(evt);
            }
        });

        blurayCheckBox.setBackground(resourceMap.getColor("blurayCheckBox.background")); // NOI18N
        blurayCheckBox.setText(resourceMap.getString("blurayCheckBox.text")); // NOI18N
        blurayCheckBox.setName("blurayCheckBox"); // NOI18N

        booksCheckBox.setBackground(resourceMap.getColor("booksCheckBox.background")); // NOI18N
        booksCheckBox.setText(resourceMap.getString("booksCheckBox.text")); // NOI18N
        booksCheckBox.setName("booksCheckBox"); // NOI18N

        downloadCheckBox.setBackground(resourceMap.getColor("downloadCheckBox.background")); // NOI18N
        downloadCheckBox.setText(resourceMap.getString("downloadCheckBox.text")); // NOI18N
        downloadCheckBox.setName("downloadCheckBox"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        completPurchaseButton.setBackground(resourceMap.getColor("completPurchaseButton.background")); // NOI18N
        completPurchaseButton.setFont(resourceMap.getFont("completPurchaseButton.font")); // NOI18N
        completPurchaseButton.setText(resourceMap.getString("completPurchaseButton.text")); // NOI18N
        completPurchaseButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        completPurchaseButton.setName("completPurchaseButton"); // NOI18N
        completPurchaseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                completPurchaseButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(blurayCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(booksCheckBox))
                            .addComponent(downloadCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(greetingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(clearTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addToChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(purchaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(completPurchaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(greetingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(loginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(downloadCheckBox)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(blurayCheckBox)
                                .addComponent(booksCheckBox)))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addToChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(completPurchaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        loginMenu.setText(resourceMap.getString("loginMenu.text")); // NOI18N
        loginMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                loginMenuMouseReleased1(evt);
            }
        });
        loginMenu.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
                loginMenuMenuKeyReleased(evt);
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        fileMenu.add(loginMenu);

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseReleased(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(onlinebkstore.OnlineBKStoreApp.class).getContext().getActionMap(OnlineBKStoreView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        cartMenu.setText(resourceMap.getString("cartMenu.text")); // NOI18N
        cartMenu.setName("cartMenu"); // NOI18N

        emptyCartMenu.setText(resourceMap.getString("emptyCartMenu.text")); // NOI18N
        emptyCartMenu.setName("emptyCartMenu"); // NOI18N
        emptyCartMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                emptyCartMenuMouseReleased(evt);
            }
        });
        emptyCartMenu.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
                emptyCartMenuMenuKeyReleased(evt);
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        cartMenu.add(emptyCartMenu);

        menuBar.add(cartMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 717, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void selectAllBooks() {
        // Declare needed SQL objects

        try {
            Statement stmt = null;
            ResultSet rs = null;

            //Get a Statement object
            stmt = con.createStatement();

            // Execute SQL statement
            rs = stmt.executeQuery("SELECT * "
                    + "FROM book");

            int tuple = 0;
            String ISBN[] = new String[1000];
            String title[] = new String[1000];
            double price[] = new double[1000];

            while (rs.next()) {	// Read the ISBN, number, Code, price and total value calculated
                ISBN[tuple] = rs.getString(1);
                title[tuple] = rs.getString(2);
                price[tuple] = rs.getDouble(4);

                itemTable.getModel().setValueAt(ISBN[tuple], tuple, 0);
                itemTable.getModel().setValueAt(title[tuple], tuple, 1);
                itemTable.getModel().setValueAt(price[tuple], tuple, 3);

                tuple++;
            }
        } catch (Exception e) { // Catch any exceptions thrown
            mainTextArea.setText("Exception: " + e.getMessage());
        } finally { // Close connection to SQL
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
            }
        }
    }

    private void searchItems(String pattern) {

        if (pattern.contains("*")) {
            pattern = " ";
        }

        String ISBN;
        String title;
        String language;
        int year;
        int pages;
        double price;
        int total;
        int length;

        try {
            // Print date of report
            Calendar c = Calendar.getInstance();
            mainTextArea.append(String.format("Report Date: %tm/%td/%tY%n", c, c, c));

            if (booksCheckBox.isSelected()) {
                Statement stmt = null;
                ResultSet rs = null;

                //Get a Statement object
                stmt = con.createStatement();

                // Execute SQL statement for books
                rs = stmt.executeQuery("SELECT ID, title, language, year, pages, price, sum(number) "
                        + "FROM (item NATURAL JOIN book) NATURAL JOIN stocks "
                        + "WHERE lower(title) like '%" + pattern + "%' "
                        + "or lower(ID) like '%" + pattern + "%' "
                        + "or lower(language) like '%" + pattern + "%' "
                        + "GROUP BY ID");

                if (rs.isBeforeFirst()) {
                    mainTextArea.append("Books:\n");
                    mainTextArea.append("|-------------|-------------------------------------------------------------|------------|------|------|---------|----------|\n");
                    mainTextArea.append("|    ISBN     |                            Title                            |  Language  | Year | Pages| Price($)| Available|\n");
                    mainTextArea.append("|-------------|-------------------------------------------------------------|------------|------|------|---------|----------|\n");
                }

                while (rs.next()) {	// Read the ISBN, number, Code, price and total value calculated
                    ISBN = rs.getString(1);
                    title = rs.getString(2);
                    language = rs.getString(3);
                    pages = rs.getInt(4);
                    year = rs.getInt(5);
                    price = rs.getDouble(6);
                    total = rs.getInt(7);

                    // Trim length of title
                    length = title.length();
                    while (length > 60) {
                        length = length - 1;
                    }


                    // Print contents using formating and width for the report
                    mainTextArea.append(String.format("| %-11s", ISBN));    // Width of 11 (String)
                    mainTextArea.append(String.format(" | %-59s", title.substring(0, length)));// Width of 60 (String)
                    mainTextArea.append(String.format(" | %-10s", language));    // Width of 11 (String)
                    mainTextArea.append(String.format(" | %4d", pages)); // Width of 6 (Integer)
                    mainTextArea.append(String.format(" | %4d", year)); // Width of 6 (Integer)
                    mainTextArea.append(String.format(" | %7.2f", price)); // Width of 8 (Numbers)
                    mainTextArea.append(String.format(" | %9d|\n", total)); // Width of 6 (Integer)
                }
                mainTextArea.append("\n");
                stmt.close();
            }

            if (blurayCheckBox.isSelected()) {
                Statement stmt = null;
                ResultSet rs = null;

                // Get a Statement object
                // Blu Ray items
                stmt = con.createStatement();

                // Execute SQL statement for Blu
                rs = stmt.executeQuery("SELECT ID, title, language, year, duration, disks, price, sum(number) "
                        + "FROM (item NATURAL JOIN blueraydisk) NATURAL JOIN stocks "
                        + "WHERE lower(title) like '%" + pattern + "%' "
                        + "or lower(ID) like '%" + pattern + "%' "
                        + "or lower(language) like '%" + pattern + "%' "
                        + "GROUP BY ID");

                if (rs.isBeforeFirst()) {
                    mainTextArea.append("BluRay DVD:\n");
                    mainTextArea.append("|-------------|-------------------------------------------------------------|------------------|------|---------|------|---------|----------|\n");
                    mainTextArea.append("|    ASIN     |                            Title                            |     Language     | Year | Duration| Disks| Price($)| Available|\n");
                    mainTextArea.append("|-------------|-------------------------------------------------------------|------------------|------|---------|------|---------|----------|\n");
                }

                while (rs.next()) {	// Read the ISBN, number, Code, price and total value calculated
                    String ASIN = rs.getString(1);
                    title = rs.getString(2);
                    language = rs.getString(3);
                    year = rs.getInt(4);
                    int duration = rs.getInt(5);
                    int disks = rs.getInt(6);
                    price = rs.getDouble(7);
                    total = rs.getInt(8);

                    // Trim length of title
                    int titleLength = title.length();
                    while (titleLength > 60) {
                        titleLength = titleLength - 1;
                    }

                    int languageLength = language.length();
                    while (languageLength > 16) {
                        languageLength = languageLength - 1;
                    }


                    // Print contents using formating and width for the report
                    mainTextArea.append(String.format("| %-11s", ASIN));    // Width of 11 (String)
                    mainTextArea.append(String.format(" | %-59s", title.substring(0, titleLength)));// Width of 60 (String)
                    mainTextArea.append(String.format(" | %-16s", language.substring(0, languageLength)));    // Width of 16 (String)
                    mainTextArea.append(String.format(" | %4d", year)); // Width of 6 (Integer)
                    mainTextArea.append(String.format(" | %7d", duration)); // Width of 6 (Integer)
                    mainTextArea.append(String.format(" | %4d", disks)); // Width of 6 (Integer)
                    mainTextArea.append(String.format(" | %7.2f", price)); // Width of 8 (Numbers)
                    mainTextArea.append(String.format(" | %9d|\n", total)); // Width of 6 (Integer)
                }
                mainTextArea.append("\n");
                stmt.close();
            }

            if (downloadCheckBox.isSelected()) {
                Statement stmt = null;
                ResultSet rs = null;

                // Get a Statement object
                // downloadable_video items
                stmt = con.createStatement();

                // Execute SQL statement for Blu
                rs = stmt.executeQuery("SELECT ID, title, language, year, duration, size, price, sum(number) "
                        + "FROM (item NATURAL JOIN downloadable_video) NATURAL JOIN stocks "
                        + "WHERE lower(title) like '%" + pattern + "%' "
                        + "or lower(ID) like '%" + pattern + "%' "
                        + "or lower(language) like '%" + pattern + "%' "
                        + "GROUP BY ID");

                if (rs.isBeforeFirst()) {
                    mainTextArea.append("Downloadable Videos:\n");
                    mainTextArea.append("|-------------|-------------------------------------------------------------|------------------|------|---------|----------|---------|----------|\n");
                    mainTextArea.append("|    ASIN     |                            Title                            |     Language     | Year | Duration|   Size   | Price($)| Available|\n");
                    mainTextArea.append("|-------------|-------------------------------------------------------------|------------------|------|---------|----------|---------|----------|\n");
                }

                while (rs.next()) {	// Read the ISBN, number, Code, price and total value calculated
                    String ASIN = rs.getString(1);
                    title = rs.getString(2);
                    language = rs.getString(3);
                    year = rs.getInt(4);
                    int duration = rs.getInt(5);
                    String size = rs.getString(6);
                    price = rs.getDouble(7);
                    total = rs.getInt(8);

                    // Trim length of title
                    int titleLength = title.length();
                    while (titleLength > 60) {
                        titleLength = titleLength - 1;
                    }

                    int languageLength = language.length();
                    while (languageLength > 16) {
                        languageLength = languageLength - 1;
                    }

                    // Print contents using formating and width for the report
                    mainTextArea.append(String.format("| %-11s", ASIN));    // Width of 11 (String)
                    mainTextArea.append(String.format(" | %-59s", title.substring(0, titleLength)));// Width of 60 (String)
                    mainTextArea.append(String.format(" | %-16s", language.substring(0, languageLength)));    // Width of 16 (String)
                    mainTextArea.append(String.format(" | %4d", year)); // Width of 6 (Integer)
                    mainTextArea.append(String.format(" | %7d", duration)); // Width of 6 (Integer)
                    mainTextArea.append(String.format(" | %-8s", size));    // Width of 11 (String)
                    mainTextArea.append(String.format(" | %7.2f", price)); // Width of 8 (Numbers)
                    mainTextArea.append(String.format(" | %9d|\n", total)); // Width of 6 (Integer)
                }
                mainTextArea.append("\n");
                stmt.close();
            }


        } catch (Exception e) { // Catch any exceptions thrown
            mainTextArea.setText("You probably have not connected to the database!!\n");
            mainTextArea.append("Exception: " + e.getMessage());
        }
        /*
        finally { // Close connection to SQL
        try {
        if (con != null) {
        con.close();
        }
        } catch (SQLException e) {
        mainTextArea.append("Exception: " + e.getMessage());
        }
        }
         */
    }

    private void loginMenuMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginMenuMouseReleased
    }//GEN-LAST:event_loginMenuMouseReleased

    private void clearTableButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearTableButtonMouseReleased
        clearPurchasingTable();
    }//GEN-LAST:event_clearTableButtonMouseReleased

    private void searchButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseReleased
        // Clear text area
        mainTextArea.setText("");
        searchItems(searchTextField.getText().toLowerCase());
    }//GEN-LAST:event_searchButtonMouseReleased

    private void itemTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemTableKeyTyped
        int rows = itemTable.getModel().getRowCount();
        String ID;

        for (int i = 0; i < rows; i++) {
            try {
                ID = itemTable.getModel().getValueAt(i, 0).toString();
                if (ID != null) {
                    populateTableRows(i);
                }
            } catch (NullPointerException e) {
            }
        }
    }//GEN-LAST:event_itemTableKeyTyped

    private void addToChartButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addToChartButtonMouseReleased

        int rows = itemTable.getModel().getRowCount();
        String ID = null;
        int quantity = 0;

        for (int i = 0; i < rows; i++) {
            try {
                ID = itemTable.getModel().getValueAt(i, 0).toString();
                if (itemTable.getModel().getValueAt(i, 4) != null) {
                    quantity = Integer.parseInt(itemTable.getModel().getValueAt(i, 4).toString());
                } else {
                    quantity = 0;
                }

                if ((ID != null) && (quantity != 0) && userIsLoggedIn) {
                    try {
                        PreparedStatement s;
                        s = con.prepareStatement(
                                "INSERT INTO  shopping_basket (basket_id, ID, number) VALUES(?,?,?)");
                        s.setString(1, loginTextField.getText());
                        s.setString(2, ID);
                        s.setInt(3, quantity);
                        s.executeUpdate();
                        s.close();
                    } catch (Exception e) {
                        if (e.getMessage() != null) {
                            System.out.println("Exception: " + e.getMessage());
                        }
                    }
                }
            } catch (NullPointerException e) {
            }
        }
        updateShoppingBasket();
    }//GEN-LAST:event_addToChartButtonMouseReleased

    private void loginButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseReleased
        try {
            Statement stmt = null;
            ResultSet rs = null;

            //Get a Statement object
            stmt = con.createStatement();

            // Execute SQL statement
            rs = stmt.executeQuery("SELECT name, address "
                    + "FROM customer "
                    + "WHERE email = '" + loginTextField.getText() + "'");

            while (rs.next()) {
                customerName = rs.getString(1);
                customerAddress = rs.getString(2);

                greetingLabel.setText("Welcome \n" + customerName);

                userIsLoggedIn = true;  // User is now logged in
                loginTextField.setEnabled(false); // Disable component
            }
            updateShoppingBasket();
            stmt.close();

        } catch (Exception e) { // Catch any exceptions thrown
            mainTextArea.setText("Exception: " + e.getMessage());
        }
    }//GEN-LAST:event_loginButtonMouseReleased

    private void purchaseButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseButtonMouseReleased
        try {
            Statement stmt = null;
            ResultSet rs = null;

            //Get a Statement object
            stmt = con.createStatement();
            double total = 0.0;
            double shipping = 0.0;
            double tax = 0.0;

            // Execute SQL statement
            rs = stmt.executeQuery(
                    "SELECT basket_id, ID, number "
                    + "FROM shopping_basket "
                    + "WHERE basket_id = '" + loginTextField.getText() + "'");

            if (!rs.next()) {
                JOptionPane.showMessageDialog(warningDialog,
                        "You don't have any items in the cart...",
                        "Message",
                        JOptionPane.WARNING_MESSAGE);
                return;
            } else {
                mainTextArea.setText("Purchase Order:\n");
                mainTextArea.append("        |----ID-----|----Qty-|--Price-|\n");
                do {
                    total += purchaseItem(rs.getString(2), rs.getInt(3)); // buy item
                } while (rs.next());
                mainTextArea.append("        |-----------|--------|--------|\n");
                if (total > 8) {
                    shipping = total * .1;
                }
                mainTextArea.append(String.format("Purchase: $%7.2f\n", total));
                mainTextArea.append(String.format("Shipping: $%7.2f\n", shipping));
                tax = calculateTax(total);
                mainTextArea.append(String.format("Tax:      $%7.2f\n", tax));
                total = total + shipping + tax;
                mainTextArea.append("-------------------\n");
                mainTextArea.append(String.format("Total:    $%7.2f\n", total));
                customerCheckedOut = true;
            }
        } catch (Exception e) { // Catch any exceptions thrown
            if (e.getMessage() != null) {
                mainTextArea.append("purchaseButtonMouseReleased()\n");
                mainTextArea.append("Exception: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_purchaseButtonMouseReleased

    private void emptyCartMenuMenuKeyReleased(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_emptyCartMenuMenuKeyReleased
        emptyShopping_Basket();
    }//GEN-LAST:event_emptyCartMenuMenuKeyReleased

    private void loginMenuMenuKeyReleased(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_loginMenuMenuKeyReleased
        //connect to the database
        connectToDB();
    }//GEN-LAST:event_loginMenuMenuKeyReleased

    private void loginMenuMouseReleased1(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginMenuMouseReleased1
        //connect to the database
        connectToDB();
    }//GEN-LAST:event_loginMenuMouseReleased1

    private void emptyCartMenuMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emptyCartMenuMouseReleased
        emptyShopping_Basket();
    }//GEN-LAST:event_emptyCartMenuMouseReleased

    private void jMenuItem1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseReleased
        userIsLoggedIn = false;  // User is now logged in
        loginTextField.setEnabled(true); // Disable component
        mainTextArea.setText("");
        clearPurchasingTable();
        chartTextArea.setText("");
    }//GEN-LAST:event_jMenuItem1MouseReleased

    private void completPurchaseButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_completPurchaseButtonMouseReleased
        if (customerCheckedOut) {
            updateStocks(); // Update database stocks with purchase order
            emptyShopping_Basket(); // Update Shopping Basket and empty it
            mainTextArea.append("\n***ORDER COMPLETE!***\n");
        } else {
            JOptionPane.showMessageDialog(warningDialog,
                    "You need to CheckOut before completing your puchase!",
                    "Message",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_completPurchaseButtonMouseReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToChartButton;
    private javax.swing.JCheckBox blurayCheckBox;
    private javax.swing.JCheckBox booksCheckBox;
    private javax.swing.JMenu cartMenu;
    private javax.swing.JTextArea chartTextArea;
    private javax.swing.JButton clearTableButton;
    private javax.swing.JButton completPurchaseButton;
    private javax.swing.JCheckBox downloadCheckBox;
    private javax.swing.JMenuItem emptyCartMenu;
    private javax.swing.JLabel greetingLabel;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton loginButton;
    private javax.swing.JMenuItem loginMenu;
    private javax.swing.JTextField loginTextField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea mainTextArea;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton purchaseButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private boolean userIsLoggedIn = false;
    private boolean customerCheckedOut = false;
    private JDialog aboutBox;
    private JDialog warningDialog;
    private Connection con = null;
    private String customerAddress = null;
    private String customerName = null;

    private void connectToDB() {
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlinebookstore", "root", "ivinana");
            // Database is called onlinebookstore

            if (!con.isClosed()) // Test connection
            {
                mainTextArea.setText("Connection to MySQL server established...\n");
            }
        } catch (Exception e) { // Catch any exceptions thrown
            mainTextArea.setText("Exception: " + e.getMessage());
        }
    } // End connectToDB()

    private void updateShoppingBasket() {
        chartTextArea.setText("");
        try {
            Statement stmt = null;
            ResultSet rs = null;

            //Get a Statement object
            stmt = con.createStatement();

            // Execute SQL statement
            rs = stmt.executeQuery(
                    "SELECT basket_id, ID, number "
                    + "FROM shopping_basket "
                    + "WHERE basket_id = '" + loginTextField.getText() + "'");

            String ID;
            int number;

            chartTextArea.append("|--Item ID--|--Qty--|\n");
            while (rs.next()) {
                ID = rs.getString(2);
                number = rs.getInt(3);

                chartTextArea.append(String.format("|%-10s", ID));    // Width of 11 (String)
                chartTextArea.append(String.format(" | %6d|\n", number)); // Width of 6 (Integer)
            }
        } catch (Exception e) { // Catch any exceptions thrown
            if (e.getMessage() != null) {
                mainTextArea.setText("updateShoppingBasket()\n");
                mainTextArea.append("Exception: " + e.getMessage());
            }
        }
    }

    private double purchaseItem(String id, int number) {

        double price = 0.0;
        try {
            Statement stmt = null;
            ResultSet rs = null;

            //Get a Statement object
            stmt = con.createStatement();

            // See if item is a book;
            rs = stmt.executeQuery(
                    "SELECT ID, price "
                    + "FROM item NATURAL JOIN book "
                    + "WHERE ID = '" + id + "'");
            if (rs.next()) {
                price = price + (rs.getDouble(2) * number);

                mainTextArea.append("Bought: ");
                mainTextArea.append(String.format("|%-10s", id));    // Width of 11 (String)
                mainTextArea.append(String.format(" | %6d", number)); // Width of 6 (Integer)
                mainTextArea.append(String.format(" | %7.2f|\n", price / number)); // Width of 6 (Integer)
                stmt.close();
                rs.close();
                return price;
            } else { // item is not a book
                // See if item is a bluRayDisk;
                rs = stmt.executeQuery(
                        "SELECT ID, price "
                        + "FROM item NATURAL JOIN blueraydisk "
                        + "WHERE ID = '" + id + "'");
                if (rs.next()) {
                    price += rs.getDouble(2) * number;

                    mainTextArea.append("Bought: ");
                    mainTextArea.append(String.format("|%-10s", id));    // Width of 11 (String)
                    mainTextArea.append(String.format(" | %6d", number)); // Width of 6 (Integer)
                    mainTextArea.append(String.format(" | %7.2f|\n", price / number)); // Width of 6 (Integer)
                    stmt.close();
                    rs.close();
                    return price;
                } else {
                    // See if item is a book;
                    rs = stmt.executeQuery(
                            "SELECT ID, price "
                            + "FROM item NATURAL JOIN downloadable_video "
                            + "WHERE ID = '" + id + "'");
                    if (rs.next()) {
                        price += rs.getDouble(2) * number;

                        mainTextArea.append("Bought: ");
                        mainTextArea.append(String.format("|%-10s", id));    // Width of 11 (String)
                        mainTextArea.append(String.format(" | %6d", number)); // Width of 6 (Integer)
                        mainTextArea.append(String.format(" | %7.2f|\n", price / number)); // Width of 6 (Integer)
                        stmt.close();
                        rs.close();
                        return price;
                    }
                }
            }
        } catch (Exception e) { // Catch any exceptions thrown
            mainTextArea.append("purchaseItem()\n");
            mainTextArea.append("Exception: " + e.getMessage() + "\n");
        }
        return price;
    }

    private void populateTableRows(int row) {
        try {
            Statement stmt = null;
            ResultSet rs = null;

            stmt = con.createStatement();

            // Execute SQL statement  to find out all items and their creator
            rs = stmt.executeQuery(
                    "SELECT ID, title, name, price "
                    + "FROM (SELECT ID, title, name, price "
                    + "FROM (item NATURAL JOIN book) NATURAL JOIN created_by) as B "
                    + "WHERE ID = '" + itemTable.getModel().getValueAt(row, 0).toString() + "' "
                    + "UNION "
                    + "SELECT ID, title, name, price "
                    + "FROM (SELECT ID, title, name, price "
                    + "FROM (item NATURAL JOIN downloadable_video) NATURAL JOIN created_by) as D "
                    + "WHERE ID = '" + itemTable.getModel().getValueAt(row, 0).toString() + "' "
                    + "UNION "
                    + "SELECT ID, title, name, price "
                    + "FROM (SELECT ID, title, name, price "
                    + "FROM (item NATURAL JOIN blueraydisk) NATURAL JOIN created_by) as BR "
                    + "WHERE ID = '" + itemTable.getModel().getValueAt(row, 0).toString() + "' ");

            if (rs.next()) {    // If there are data then update the row
                do {
                    String title = rs.getString(2);
                    String name = rs.getString(3);
                    double price = rs.getDouble(4);

                    itemTable.getModel().setValueAt(title, row, 1);
                    itemTable.getModel().setValueAt(name, row, 2);
                    itemTable.getModel().setValueAt(price, row, 3);
                } while (rs.next());
                stmt.close();
            } else {    // else clear the row
                itemTable.getModel().setValueAt(null, row, 1);
                itemTable.getModel().setValueAt(null, row, 2);
                itemTable.getModel().setValueAt(null, row, 3);
            }
        } catch (Exception e) {
            mainTextArea.append("populateTableRows()\n");
            mainTextArea.append("Exception: " + e.getMessage() + "\n");

        }
    }

    private void emptyShopping_Basket() {
        try {

            PreparedStatement s;
            s = con.prepareStatement(
                    "DELETE FROM shopping_basket "
                    + "WHERE basket_id = '" + loginTextField.getText() + "'");
            s.executeUpdate();
            updateShoppingBasket();
            s.close();
        } catch (Exception e) { // Catch any exceptions thrown
            mainTextArea.setText("emptyShopping_Basket()\n");
            mainTextArea.append("Exception: " + e.getMessage());
        }
    }

    private void clearPurchasingTable() {
        int rows, columns;
        rows = itemTable.getModel().getRowCount();
        columns = itemTable.getModel().getColumnCount();

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                itemTable.getModel().setValueAt(null, i, j);
            }
        }
    }

    private double calculateTax(double total) {
        if (customerAddress.toLowerCase().contains("NJ".toLowerCase())
                || customerAddress.toLowerCase().contains("New Jersey".toLowerCase())
                || customerAddress.toLowerCase().contains("NewJersey".toLowerCase())) {
            return (total * .07);
        } else {
            return 0.0;
        }
    }

    private void updateStocks() {
        try {

            Statement stmt = null;
            ResultSet rs = null;
            PreparedStatement s = null;

            //Get a Statement object
            stmt = con.createStatement();

            // Execute SQL statement
            rs = stmt.executeQuery(
                    "SELECT basket_id, ID, number "
                    + "FROM shopping_basket "
                    + "WHERE basket_id = '" + loginTextField.getText() + "'");

            String ID;
            int number;

            chartTextArea.append("|--Item ID--|--Qty--|\n");
            while (rs.next()) {
                ID = rs.getString(2);
                number = rs.getInt(3);

                s = con.prepareStatement(
                        "UPDATE stocks SET number = number - " + number + " "
                        + "WHERE ID = '" + ID + "'");
                s.executeUpdate();
                updateShoppingBasket();
                s.close();
            }
        } catch (Exception e) { // Catch any exceptions thrown
            mainTextArea.setText("updateStocks()\n");
            mainTextArea.append("Exception: " + e.getMessage());
        }
    }
}
